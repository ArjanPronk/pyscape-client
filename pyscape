#!/usr/bin/python3

import sys
import json
import csv
from src.pyscape import Pyscape
from src.queries import *

def load_scope(preset):
    with open('./data/defaults.json', 'r') as f:
        data = json.load(f)
    
    return data[preset]['scope']

def load_cols(preset, c_id):
    with open('./data/defaults.json', 'r') as f:
        data = json.load(f)

    with open('./data/bitflags.json', 'r') as g:
        index = json.load(g)

    cols = 0

    for i in data[preset][c_id]:
        # The bitflag.json generating script returns strings? 
        cols = cols | int(index[i]['flag'])

    return cols

def help():
    print("Placeholder.")

def main():

    method = sys.argv[1] if len(sys.argv) > 1 else None
    option1 = sys.argv[2] if len(sys.argv) > 2 else None
    option2 = sys.argv[3] if len(sys.argv) > 3 else None
    option3 = sys.argv[4] if len(sys.argv) > 4 else None
    option4 = sys.argv[5] if len(sys.argv) > 5 else None

    with open('keys.json', 'r') as k:
        key_string = json.load(k)

    pys = Pyscape(key_string['access-id'], key_string['secret-key'])

    if not method:
        help()
        sys.exit()

    # Begin long tree of options...
    if method == 'top':
        if not option1:
            exit('Missing arguments')
        cols = load_cols('t', 'c')
        output = t_query(pys, option1, cols)

    elif method == 'metrics':
        if not option2:
            exit('Missing arguments')
        if option1 == "-d":
            cols = load_cols('u_d', 'c')
        elif option1 == "-s":
            cols = load_cols('u_s', 'c')
        elif option1 == "-p":
            cols = load_cols('u_p', 'c')
        else:
            exit('Invalid argument')

        output = u_query(pys, option2, cols)

    elif method == 'bulk-metrics':
        if not option2:
            exit('Missing arguments')
        if option1 == "-d":
            cols = load_cols('u_d', 'c')
        elif option1 == "-s":
            cols = load_cols('u_s', 'c')
        elif option1 == "-p":
            cols = load_cols('u_p', 'c')
        else:
            exit('Invalid argument')

        urls = []
        with open(option2, 'r') as j:
            for line in j:
                urls.append(line.rstrip())
        output = bulk_metrics(pys, urls, cols)

    elif method == 'links':
        if not option3:
            exit('Missing arguments')
        
        preset = 'l_'

        if option2 == '--one':
            preset += 'dt'
        elif option2 == '--all':
            preset += 'pt'
        else:
            exit('Invalid argument')

        if option1 == '-d':
            preset += 'd'
        elif option1 == '-s':
            preset += 's'
        elif option1 == '-p':
            preset += 'p'
        else:
            exit('Invalid argument')

        tc = load_cols(preset, 'tc')
        sc = load_cols(preset, 'sc')
        lc = load_cols(preset, 'lc')
        scope = load_scope(preset)

        args = (tc, sc, lc, scope)
        output = l_query(pys, option3, *args)

    elif method == 'anchor':
        # Check required arguments exist
        if not option3:
            exit('Missing arguments')

        preset = 'a_'

        if option2 == '--phrase':
            preset += 'pt'
        elif option2 == '--term':
            preset += 'tt'
        else:
            exit('Invalid argument')

        if option1 == '-d':
            preset += 'd'
        elif option1 == '-s':
            preset += 's'
        elif option1 == '-p':
            preset += 'p'
        else:
            exit('Invalid argument')

        cols = load_cols(preset, 'c')
        scope = load_scope(preset)
        args = (cols, scope)
        output = a_query(pys, option3, *args)

    else:
        help()
        sys.exit()
    
    print(output)

if __name__ == '__main__':
    sys.exit(main())
